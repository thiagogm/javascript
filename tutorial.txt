usuário: t-334031
senha: G1JTXfK8

usuário: t-354645
senha: uX34UgPh

# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar ao repositório )
git status (verificar status do repositório local)
git add . (adiciona ao repositório local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar para o repositório GitHub)
git pull (sincroniza as informações do repositório no PC)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

_____________________________________________________

Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Thiago Moura
    @version 1.0
*/
2) Nomes de Arquivos, variáveis, funções, clases, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para 
declaração de nomes(erros internos no programa)_
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com números
- Quando for declarar dois nomes usar a técnica do camelo (camel case)
- Usar uma letra maiúscula na segunda palavra
- Exemplo nomecliente -> nomeCliente
__________________________________________________________________

- Comandos básicos do MS-dois
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretórios
cd .. -> voltar para ao diretório anterior
_______________________________________________________

Node é uma plataforma que permite a execução do JavaScript fora do navegador (browser)
https://nodejs.org (baixar sempre a versão LTS)

Comandos básicos
node -v (versão do node)

Gerenciador de pacotes para o node
npm está relacionado a pasta do projeto ou seja os pacotes são instalados na raiz do projeto e 
não no sistema operacional

npm -v (versão do npm)
npm ls (listar pacotes instalados)
npm init (iniciar um novo projeto JavaScript)
  |_____package.json

json (JavaScript Object Notation)
___________________________________________________________
variáveis Constante e

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

Nas linguagens de programação as variáveis são (tipadas) ou dinamicamente tipadas

Existem 3 tipos de variáveis:

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

ATENÇÃO: No JS uma variável pode ser criada usando let ou var
var (obsoleto e inseguro), usar sempre o let
__________________________________________________________________

Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> criar(declarar) uma constante
let -> criar(declarar) uma variável
typeof() -> verificar o tipo de variável


